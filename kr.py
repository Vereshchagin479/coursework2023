# -*- coding: utf-8 -*-
"""kr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rPYg0LYUPUXD652ixvBn-OTCbtzRXTce
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras #модуль для работы уже присутствует в керасе
# %matplotlib inline
from tensorflow.keras.datasets import fashion_mnist 
from tensorflow.keras.models import Sequential #слои идут друг за другом
from tensorflow.keras.layers import Dense, Dropout #слои полносвязные
from tensorflow.keras import utils #утилиты для удобства

(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data() #загрузка и деление обучающей и тестовой выборки

class_names = ['T-shirt/top','Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

plt.figure() 
plt.imshow(x_train[10001])
plt.colorbar()
plt.grid(False)

x_train = x_train / 255 #делаем интенсивность пикселей от 0 до 1
x_test = x_test / 255

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128, activation="relu"),
    keras.layers.Dense(10, activation="softmax")
]) #сама нейросеть

model.compile(optimizer=tf.keras.optimizers.SGD(), loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])

model.summary()

model.fit(x_train, y_train, epochs=10)

test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test acc: ',test_acc)

predictions = model.predict(x_train)

predictions[0]

np.argmax(predictions[0])

y_train[0]

print("Введите номер картинки от 0 до 59999:")
n = int(input())
plt.figure()
plt.imshow(x_train[n])
plt.colorbar()
plt.grid(False)
print("Ответ нейросети:",class_names[np.argmax(predictions[n])])
print("Правильный ответ:", class_names[y_train[n]])

class_correct = {}
class_incorrect = {}
for i in range(len(y_train)):
    if y_train[i] == predicted_classes[i]:
        if y_train[i] not in class_correct:
            class_correct[y_train[i]] = 0
        class_correct[y_train[i]] += 1
    else:
        if y_train[i] not in class_incorrect:
            class_incorrect[y_train[i]] = 0
        class_incorrect[y_train[i]] += 1
print("{:<30} {:<20} {:<20} {:<20}".format('Название класса', 'Правильно', 'Неправильно', 'Точность'))
print("-" * 70)

sorted_classes = sorted(class_correct.keys(), key=lambda x: class_correct[x] / (class_correct[x] + class_incorrect[x]), reverse=True)

for key in sorted_classes:
    accuracy = class_correct[key] / (class_correct[key] + class_incorrect[key])
    print("{:<30} {:<20} {:<20} {:.2%}".format(class_names[key], class_correct[key], class_incorrect[key], accuracy))